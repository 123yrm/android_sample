package com.yyp.sun.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yyp.sun.entity.MoodDiaryData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOOD_DIARY_DATA".
*/
public class MoodDiaryDataDao extends AbstractDao<MoodDiaryData, Long> {

    public static final String TABLENAME = "MOOD_DIARY_DATA";

    /**
     * Properties of entity MoodDiaryData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AuthorID = new Property(1, String.class, "authorID", false, "AUTHOR_ID");
        public final static Property CreateDate = new Property(2, String.class, "createDate", false, "CREATE_DATE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property ImageUrl1 = new Property(4, String.class, "imageUrl1", false, "IMAGE_URL1");
        public final static Property ImageUrl2 = new Property(5, String.class, "imageUrl2", false, "IMAGE_URL2");
    }


    public MoodDiaryDataDao(DaoConfig config) {
        super(config);
    }
    
    public MoodDiaryDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOOD_DIARY_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AUTHOR_ID\" TEXT," + // 1: authorID
                "\"CREATE_DATE\" TEXT," + // 2: createDate
                "\"CONTENT\" TEXT," + // 3: content
                "\"IMAGE_URL1\" TEXT," + // 4: imageUrl1
                "\"IMAGE_URL2\" TEXT);"); // 5: imageUrl2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOOD_DIARY_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MoodDiaryData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String authorID = entity.getAuthorID();
        if (authorID != null) {
            stmt.bindString(2, authorID);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(3, createDate);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String imageUrl1 = entity.getImageUrl1();
        if (imageUrl1 != null) {
            stmt.bindString(5, imageUrl1);
        }
 
        String imageUrl2 = entity.getImageUrl2();
        if (imageUrl2 != null) {
            stmt.bindString(6, imageUrl2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MoodDiaryData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String authorID = entity.getAuthorID();
        if (authorID != null) {
            stmt.bindString(2, authorID);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(3, createDate);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String imageUrl1 = entity.getImageUrl1();
        if (imageUrl1 != null) {
            stmt.bindString(5, imageUrl1);
        }
 
        String imageUrl2 = entity.getImageUrl2();
        if (imageUrl2 != null) {
            stmt.bindString(6, imageUrl2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MoodDiaryData readEntity(Cursor cursor, int offset) {
        MoodDiaryData entity = new MoodDiaryData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // authorID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageUrl1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // imageUrl2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MoodDiaryData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthorID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageUrl1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageUrl2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MoodDiaryData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MoodDiaryData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MoodDiaryData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
